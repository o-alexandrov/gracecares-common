/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * gracecares.ai API
 * RESTful service for gracecares.ai website
 * OpenAPI spec version: 1.0.0
 */
import type {
  GetV1TaskRecipientCreated200Item,
  GetV1UserCheckPhoneParams,
  PatchV1NetworkRecipientCreatedBody,
  PatchV1UserBody,
  PostV1File200,
  PostV1MsgBody,
  PostV1Network200,
  PostV1Network201,
  PostV1NetworkBody,
  PostV1NetworkRecipientCreatedCollaborator200,
  PostV1NetworkRecipientCreatedCollaborator201,
  PostV1NetworkRecipientCreatedCollaboratorBody,
  PostV1Prompt200,
  PostV1PromptBody,
  PostV1PromptCheck200,
  PostV1PromptCheckBody,
  PostV1UserVerifyBody,
  PostV1UserVerifyConfirm200,
  PostV1UserVerifyConfirmBody
} from './api.schemas';

import { req } from '../src/orval/fetch';
import { queryString } from '../src/orval/params-serializer';

/**
 * @summary Request presigned URL for clinical document upload
 */
export const postV1File = async (): Promise<PostV1File200> => {
  
  return req<PostV1File200>(postV1FilePath, {
    protected: true
  });
}
export const postV1FilePath = `v1/file`



/**
 * @summary Send an SMS with directions
 */
export const postV1Msg = async (postV1MsgBody: PostV1MsgBody,): Promise<undefined> => {
  
  return req<undefined>(postV1MsgPath, {
    data: postV1MsgBody,
    protected: true
  });
}
export const postV1MsgPath = `v1/msg`



/**
 * @summary Delete all created networks by the Authenticated user
 */
export const deleteV1Network = async (): Promise<undefined> => {
  
  return req<undefined>(deleteV1NetworkPath, {
    method: `DELETE`,
    protected: true
  });
}
export const deleteV1NetworkPath = `v1/network`



/**
 * @summary Create network
 */
export const postV1Network = async (postV1NetworkBody: PostV1NetworkBody,): Promise<PostV1Network200 | PostV1Network201> => {
  
  return req<PostV1Network200 | PostV1Network201>(postV1NetworkPath, {
    data: postV1NetworkBody,
    protected: true
  });
}
export const postV1NetworkPath = `v1/network`



/**
 * @summary Update network
 */
export const patchV1NetworkRecipientCreated = async (pathParams: {recipient: string, created: number}, patchV1NetworkRecipientCreatedBody: PatchV1NetworkRecipientCreatedBody,): Promise<undefined> => {
  
  return req<undefined>(patchV1NetworkRecipientCreatedPath(pathParams), {
    method: `PATCH`,
    data: patchV1NetworkRecipientCreatedBody,
    protected: true
  });
}
export const patchV1NetworkRecipientCreatedPath = (pathParams: {recipient: string, created: number}) =>
  `v1/network/${pathParams.recipient}/${pathParams.created}`



/**
 * @summary Add collaborator to network
 */
export const postV1NetworkRecipientCreatedCollaborator = async (pathParams: {recipient: string, created: number}, postV1NetworkRecipientCreatedCollaboratorBody: PostV1NetworkRecipientCreatedCollaboratorBody,): Promise<PostV1NetworkRecipientCreatedCollaborator200 | PostV1NetworkRecipientCreatedCollaborator201> => {
  
  return req<PostV1NetworkRecipientCreatedCollaborator200 | PostV1NetworkRecipientCreatedCollaborator201>(postV1NetworkRecipientCreatedCollaboratorPath(pathParams), {
    data: postV1NetworkRecipientCreatedCollaboratorBody,
    protected: true
  });
}
export const postV1NetworkRecipientCreatedCollaboratorPath = (pathParams: {recipient: string, created: number}) =>
  `v1/network/${pathParams.recipient}/${pathParams.created}/collaborator`



/**
 * @summary Send data for a prompt
 */
export const postV1Prompt = async (postV1PromptBody: PostV1PromptBody,): Promise<PostV1Prompt200> => {
  
  return req<PostV1Prompt200>(postV1PromptPath, {
    data: postV1PromptBody,
    protected: true
  });
}
export const postV1PromptPath = `v1/prompt`



/**
 * @summary Retrieve the LLM's summary
 */
export const postV1PromptCheck = async (postV1PromptCheckBody: PostV1PromptCheckBody,): Promise<PostV1PromptCheck200> => {
  
  return req<PostV1PromptCheck200>(postV1PromptCheckPath, {
    data: postV1PromptCheckBody,
    protected: true
  });
}
export const postV1PromptCheckPath = `v1/prompt/check`



/**
 * @summary Get all tasks within a network
 */
export const getV1TaskRecipientCreated = async (pathParams: {recipient: string, created: number}): Promise<GetV1TaskRecipientCreated200Item[]> => {
  
  return req<GetV1TaskRecipientCreated200Item[]>(getV1TaskRecipientCreatedPath(pathParams), {
    method: `GET`,
    protected: true
  });
}
export const getV1TaskRecipientCreatedPath = (pathParams: {recipient: string, created: number}) =>
  `v1/task/${pathParams.recipient}/${pathParams.created}`



/**
 * @summary Update user from Authorization header
 */
export const patchV1User = async (patchV1UserBody: PatchV1UserBody,): Promise<undefined> => {
  
  return req<undefined>(patchV1UserPath, {
    method: `PATCH`,
    data: patchV1UserBody,
    protected: true
  });
}
export const patchV1UserPath = `v1/user`



/**
 * @summary Check whether user exists
 */
export const getV1UserCheckPhone = async (pathParams: {phone: string}, params?: GetV1UserCheckPhoneParams,): Promise<undefined> => {
  
  return req<undefined>(getV1UserCheckPhonePath(pathParams, params), {
    method: `GET`
  });
}
export const getV1UserCheckPhonePath = (pathParams: {phone: string}, params?: GetV1UserCheckPhoneParams | Falsy) =>
  `v1/user/check/${pathParams.phone}${queryString(params)}`



/**
 * @summary Verification Step1. Request a code
 */
export const postV1UserVerify = async (postV1UserVerifyBody: PostV1UserVerifyBody,): Promise<undefined> => {
  
  return req<undefined>(postV1UserVerifyPath, {
    data: postV1UserVerifyBody
  });
}
export const postV1UserVerifyPath = `v1/user/verify`



/**
 * @summary Verification Step2. Confirm verification code
 */
export const postV1UserVerifyConfirm = async (postV1UserVerifyConfirmBody: PostV1UserVerifyConfirmBody,): Promise<PostV1UserVerifyConfirm200> => {
  
  return req<PostV1UserVerifyConfirm200>(postV1UserVerifyConfirmPath, {
    data: postV1UserVerifyConfirmBody
  });
}
export const postV1UserVerifyConfirmPath = `v1/user/verify-confirm`



