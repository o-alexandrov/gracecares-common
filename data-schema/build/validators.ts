/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * gracecares.ai API
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod/v4';

import {
  trim,
  trimAndLowerCase
} from './validators.preprocess';


/**
 * @summary Send an SMS with directions
 */
export const postV1MsgBody = zod.object({
  "threadId": zod.string(),
  "phoneNumber": zod.string(),
  "message": zod.string()
})


/**
 * @summary Create network
 */
export const postV1NetworkBodyPhoneRegExp = new RegExp('(?=^\\d{10}$)');
export const postV1NetworkBodyRelationshipRegExp = new RegExp('(?=^.{0,}$)(?=^.{0,200}$)');
export const postV1NetworkBodyNameRegExp = new RegExp('(?=^.{1,}$)(?=^.{0,200}$)');
export const postV1NetworkBodyNamePreferredRegExp = new RegExp('(?=^.{0,}$)(?=^.{0,200}$)');
export const postV1NetworkBodyZipRegExp = new RegExp('(?=^.{5}$)(?=^\\d+$)');
export const postV1NetworkBodyNotesRegExp = new RegExp('(?=^.{0,}$)(?=^.{0,1000}$)');

export const postV1NetworkBody = zod.object({
  "phone": zod.preprocess(trim, zod.string().regex(postV1NetworkBodyPhoneRegExp)),
  "relationship": zod.preprocess(trim, zod.string().regex(postV1NetworkBodyRelationshipRegExp)),
  "name": zod.preprocess(trim, zod.string().regex(postV1NetworkBodyNameRegExp)),
  "namePreferred": zod.preprocess(trim, zod.string().regex(postV1NetworkBodyNamePreferredRegExp).optional()),
  "zip": zod.preprocess(trim, zod.string().regex(postV1NetworkBodyZipRegExp).optional()),
  "notes": zod.preprocess(trim, zod.string().regex(postV1NetworkBodyNotesRegExp).optional())
})


/**
 * @summary Update network
 */
export const patchV1NetworkRecipientCreatedBodyHealthConditionRegExp = new RegExp('(?=^.{1,}$)(?=^.{0,1000}$)');
export const patchV1NetworkRecipientCreatedBodyCareNeedsItemRegExp = new RegExp('(?=^.{1,}$)(?=^.{0,200}$)');

export const patchV1NetworkRecipientCreatedBody = zod.object({
  "healthCondition": zod.preprocess(trim, zod.string().regex(patchV1NetworkRecipientCreatedBodyHealthConditionRegExp).optional()),
  "careNeeds": zod.array(zod.preprocess(trimAndLowerCase, zod.string().regex(patchV1NetworkRecipientCreatedBodyCareNeedsItemRegExp))).optional(),
  "expectation": zod.literal(3).or(zod.literal(4)).or(zod.literal(5)).optional(),
  "conditionStartDate": zod.preprocess(trim, zod.string().optional())
})


/**
 * @summary Add collaborator to network
 */
export const postV1NetworkRecipientCreatedCollaboratorBodyNameRegExp = new RegExp('(?=^.{1,}$)(?=^.{0,200}$)');
export const postV1NetworkRecipientCreatedCollaboratorBodyPhoneRegExp = new RegExp('(?=^\\d{10}$)');
export const postV1NetworkRecipientCreatedCollaboratorBodyNotesRegExp = new RegExp('(?=^.{0,}$)(?=^.{0,1000}$)');

export const postV1NetworkRecipientCreatedCollaboratorBody = zod.object({
  "name": zod.preprocess(trim, zod.string().regex(postV1NetworkRecipientCreatedCollaboratorBodyNameRegExp)),
  "phone": zod.preprocess(trim, zod.string().regex(postV1NetworkRecipientCreatedCollaboratorBodyPhoneRegExp)),
  "notes": zod.preprocess(trim, zod.string().regex(postV1NetworkRecipientCreatedCollaboratorBodyNotesRegExp).optional())
})


/**
 * @summary Send data for a prompt
 */
export const postV1PromptBodyUserIDRegExp = new RegExp('(?=^.{21}$)(?=^[\\w~.-]+$)');
export const postV1PromptBodyIdRegExp = new RegExp('(?=^.{21}$)(?=^[\\w~.-]+$)');

export const postV1PromptBody = zod.object({
  "userID": zod.string().regex(postV1PromptBodyUserIDRegExp),
  "created": zod.number(),
  "id": zod.string().regex(postV1PromptBodyIdRegExp).optional()
})


/**
 * @summary Retrieve the LLM's summary
 */
export const postV1PromptCheckBody = zod.object({
  "id": zod.string().optional(),
  "runId": zod.string().optional(),
  "assistantId": zod.string().optional(),
  "fileId": zod.string().optional(),
  "waitForCompletion": zod.boolean().optional()
})


/**
 * @summary Update user from Authorization header
 */
export const patchV1UserBodyNameRegExp = new RegExp('(?=^.{1,}$)(?=^.{0,200}$)');
export const patchV1UserBodyNamePreferredRegExp = new RegExp('(?=^.{0,}$)(?=^.{0,200}$)');
export const patchV1UserBodyZipRegExp = new RegExp('(?=^.{5}$)(?=^\\d+$)');

export const patchV1UserBody = zod.object({
  "name": zod.preprocess(trim, zod.string().regex(patchV1UserBodyNameRegExp).optional()),
  "namePreferred": zod.preprocess(trim, zod.string().regex(patchV1UserBodyNamePreferredRegExp).optional()),
  "zip": zod.preprocess(trim, zod.string().regex(patchV1UserBodyZipRegExp).optional())
})


/**
 * @summary Verification Step1. Request a code
 */
export const postV1UserVerifyBodyPhoneRegExp = new RegExp('(?=^\\d{10}$)');

export const postV1UserVerifyBody = zod.object({
  "phone": zod.preprocess(trim, zod.string().regex(postV1UserVerifyBodyPhoneRegExp))
})


/**
 * @summary Verification Step2. Confirm verification code
 */
export const postV1UserVerifyConfirmBodyPhoneRegExp = new RegExp('(?=^\\d{10}$)');

export const postV1UserVerifyConfirmBody = zod.object({
  "phone": zod.preprocess(trim, zod.string().regex(postV1UserVerifyConfirmBodyPhoneRegExp)),
  "codeV": zod.string()
})


