/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * gracecares.ai API
 * RESTful service for gracecares.ai website
 * OpenAPI spec version: 1.0.0
 */
/**
 * Street address
 * @pattern (?=^.{0,}$)(?=^.{0,500}$)
 */
export type Address = string;

/**
 * A custom unique identifier, generated by our service

The assignee is a person who is assigned to a specific task within a network.
 * @pattern (?=^.{1,}$)(?=^.{0,200}$)
 */
export type AssigneeID = string;

/**
 * Authentication information to upload a file to AWS S3, includes:
- policy
- signature
 */
export interface AuthFile {
  /** Base64 encoded policy */
  readonly policy: string;
  /** Base64 encoded signature */
  readonly signature: string;
}

/**
 * Authentication information to upload a file to AWS S3, includes:
- policy
- signature
 */
export type AuthFiles = readonly AuthFile[];

/**
 * A custom unique identifier, generated by our service

The caregiver is a person who provides care for another individual within a network.
 * @pattern (?=^.{1,}$)(?=^.{0,200}$)
 */
export type CaregiverID = string;

/**
 * List of care needs
 */
export type CareNeeds = string[];

/**
 * A short numeric code that is sent to recover.
 */
export type CodeR = string;

/**
 * A short numeric code that is sent to verify
 */
export type CodeV = string;

/**
 * Any additional information
 */
export interface Collaborator {
  /** The user's ID from `user` table */
  id: Id;
  /** Notes about the collaborator */
  notes?: Notes;
  confirmed: ConfirmedNetwork;
}

/**
 * List of collaborators
 */
export type Collaborators = Collaborator[];

/**
 * Condition start date
 */
export type ConditionStartDate = string;

/**
 * Indicator whether a user has confirmed a specific action where this attribute is used
 */
export type ConfirmedGeneric = typeof ConfirmedGeneric[keyof typeof ConfirmedGeneric];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConfirmedGeneric = {
  NUMBER_1: 1,
} as const;

/**
 * Indicator whether a care recipient has confirmed a network with a caregiver
 */
export type ConfirmedNetwork = typeof ConfirmedNetwork[keyof typeof ConfirmedNetwork];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConfirmedNetwork = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

/**
 * Indicator whether a user has confirmed their phone number
 */
export type ConfirmedPhone = typeof ConfirmedPhone[keyof typeof ConfirmedPhone];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConfirmedPhone = {
  NUMBER_1: 1,
} as const;

/**
 * Command to create
 */
export type Create = boolean;

/**
 * Timestamp in days
 */
export type CreatedDays = number;

/**
 * Timestamp in hours
 */
export type CreatedHours = number;

/**
 * Timestamp in seconds
 */
export type CreatedSeconds = number;

/**
 * Timestamp in days
 */
export type DoneDays = number;

/**
 * Timestamp in hours
 */
export type DoneHours = number;

/**
 * Timestamp in seconds
 */
export type DoneSeconds = number;

/**
 * Timestamp in days
 */
export type DueDays = number;

/**
 * Timestamp in hours
 */
export type DueHours = number;

/**
 * Timestamp in seconds
 */
export type DueSeconds = number;

/**
 * Email conforming to RFC 5322
 * @pattern (?=^.{5,}$)(?=^.{0,254}$)(?=.*@.*)(?=^((([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+")))@.*$)(?=.*@((\[\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\])|(([a-zA-Z\-\d]+\.)+[a-zA-Z]{2,}))$)
 */
export type Email = string;

/**
 * Error message
 */
export type Error = string;

/**
 * Network care expectations:
- `3` (gettingBetter)
- `4` (stayingTheSame)
- `5` (gettingWorse)
 */
export type Expectation = typeof Expectation[keyof typeof Expectation];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Expectation = {
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
} as const;

/**
 * Timestamp in days
 */
export type FromDays = number;

/**
 * Timestamp in hours
 */
export type FromHours = number;

/**
 * Timestamp in seconds
 */
export type FromSeconds = number;

/**
 * Health condition description
 * @pattern (?=^.{1,}$)(?=^.{0,1000}$)
 */
export type HealthCondition = string;

/**
 * A custom unique identifier, generated by our service
 * @pattern (?=^.{1,}$)(?=^.{0,200}$)
 */
export type Id = string;

export interface ItemNetwork {
  userID: UserIDNetwork;
  caregiverID: CaregiverID;
  /** When the network was created */
  created: CreatedSeconds;
  /** List of collaborators involved in the network */
  collaborators: Collaborators;
  /** The last time the network was updated */
  updated?: UpdatedSeconds;
  /** Indicator whether the network has been confirmed by the care recipient */
  confirmed: ConfirmedNetwork;
  threadID?: ThreadID;
  /** Notes about the care recipient */
  notes?: Notes;
  /** The relationship of the care recipient to the caregiver */
  relationship?: Relationship;
  healthCondition?: HealthCondition;
  careNeeds?: CareNeeds;
  expectation?: Expectation;
  conditionStartDate?: ConditionStartDate;
}

export interface ItemTask {
  /** Unique identifier within the network */
  id: Id;
  /** User's identifier who needs to complete the task */
  assigneeID: AssigneeID;
  label: Label;
  created: CreatedSeconds;
  /** Text message content for assignee */
  msg: Msg;
  /** The time by which the task should be completed
  - optional to let some tasks to be done whenever the assignee decides to */
  due?: DueSeconds;
  updated?: UpdatedSeconds;
  done?: DoneSeconds;
  /** The time when the message was sent */
  sent?: SentSeconds;
}

export interface ItemUser {
  id: Id;
  created: CreatedSeconds;
  networks: Networks;
  phone?: Phone;
  username?: Username;
  name?: Name;
  namePreferred?: NamePreferred;
  zip?: Zip;
  confirmedPhone?: ConfirmedPhone;
  email?: Email;
  noP?: NoP;
  /** Represents when the user will be automatically removed.


A user can request account & data removal
- when we receive such request, our backend adds `ttl` attribute for automated removal a week later */
  ttl?: TtlHours;
}

/**
 * Label for the attribute
- (doesn't have to be unique)
 * @pattern (?=^.{1,}$)(?=^.{0,200}$)
 */
export type Label = string;

/**
 * Number of items per page.
- maximum is `100` (but we won't throw an error, if you request more)
 */
export type Limit = number;

/**
 * Message content
 * @pattern (?=^.{0,}$)(?=^.{0,1000}$)
 */
export type Msg = string;

/**
 * Full name
- (doesn't have to be unique)
 * @pattern (?=^.{1,}$)(?=^.{0,200}$)
 */
export type Name = string;

/**
 * Preferred name (nickname)
- (doesn't have to be unique)
 * @pattern (?=^.{0,}$)(?=^.{0,200}$)
 */
export type NamePreferred = string;

/**
 * List of networks identifiers
 */
export type Networks = string[];

/**
 * Indicator whether a user has no password
 */
export type NoP = boolean;

/**
 * Any additional comments or other information
 * @pattern (?=^.{0,}$)(?=^.{0,1000}$)
 */
export type Notes = string;

/**
 * Number of unread notifications
 */
export type Notifications = number;

/**
 * Directions (cursor) for the backend to select the next page data.
- in other words, this attribute serves for pagination
- the values are separated by `,`
 */
export type Page = string;

/**
 * A secret word or phrase used to log in (We encrypt the value)
 * @pattern (?=^.{6,}$)(?=^.{0,64}$)
 */
export type Password = string;

/**
 * A new password value (We encrypt the value)
 * @pattern (?=^.{6,}$)(?=^.{0,64}$)
 */
export type PasswordNew = string;

/**
 * Phone number
- must be a 10-digit number (e.g., 4155552671)
 * @pattern (?=^\d{10}$)
 */
export type Phone = string;

/**
 * Relationship to the user
 * @pattern (?=^.{0,}$)(?=^.{0,200}$)
 */
export type Relationship = string;

/**
 * Timestamp in days
 */
export type SentDays = number;

/**
 * Timestamp in hours
 */
export type SentHours = number;

/**
 * Timestamp in seconds
 */
export type SentSeconds = number;

/**
 * Signed URL to get the file from S3
 */
export type SignedUrl = string;

/**
 * A custom unique identifier, generated by our service

The thread is a series of messages
 * @pattern (?=^.{1,}$)(?=^.{0,200}$)
 */
export type ThreadID = string;

/**
 * Timestamp in days
 */
export type ToDays = number;

/**
 * Timestamp in hours
 */
export type ToHours = number;

/**
 * Timestamp in seconds
 */
export type ToSeconds = number;

/**
 * A secure value (token) that can be used to authenticate
 */
export type Token = string;

/**
 * Request `ttl` to be added to the `item`
 */
export type TtlAdd = boolean;

/**
 * Timestamp in days
 */
export type TtlDays = number;

/**
 * Timestamp in hours
 */
export type TtlHours = number;

/**
 * Timestamp in seconds
 */
export type TtlSeconds = number;

/**
 * Timestamp in days
 */
export type UpdatedDays = number;

/**
 * Timestamp in hours
 */
export type UpdatedHours = number;

/**
 * Timestamp in seconds
 */
export type UpdatedSeconds = number;

/**
 * A custom unique identifier, generated by our service
 * @pattern (?=^.{1,}$)(?=^.{0,200}$)
 */
export type UserIDGeneric = string;

/**
 * A custom unique identifier, generated by our service

Care recipient's identifier.
 * @pattern (?=^.{1,}$)(?=^.{0,200}$)
 */
export type UserIDNetwork = string;

/**
 * Must be unique. `john` & `John` are considered the same due to case-insensitivity.

A user can still save their username with uppercase letters, but the case will be preserved `only` for the display purposes.

`username` exists for/in:
- URLs
- mentions
- search
- etc.
 * @pattern (?=^.{1,}$)(?=^.{0,30}$)(?=^[\w\-.]+$)
 */
export type Username = string;

/**
 * ZIP code
- (must be exactly 5 digits)
 * @pattern (?=^.{5}$)(?=^\d+$)
 */
export type Zip = string;

export type PostV1File200 = {
  id: Id;
  authFile: AuthFile;
};

export type PostV1MsgBody = {
  /** Unique identifier within the network */
  id: Id;
  userID: UserIDNetwork;
  /** When the network was created */
  created: CreatedSeconds;
};

export type PostV1Msg422 = {
  expected: string;
  code: string;
  message: string;
};

export type PostV1NetworkBody = {
  phone: Phone;
  relationship: Relationship;
  name: Name;
  namePreferred?: NamePreferred;
  zip?: Zip;
  notes?: Notes;
};

/**
 * Care recipient user's data
 */
export type PostV1Network200CareRecipient = {
  id: Id;
  created: CreatedSeconds;
  networks: Networks;
  phone?: Phone;
  username?: Username;
  name?: Name;
  namePreferred?: NamePreferred;
  zip?: Zip;
};

export type PostV1Network200 = {
  /** When the network was created */
  created: CreatedSeconds;
  /** Care recipient user's data */
  careRecipient: PostV1Network200CareRecipient;
};

/**
 * Care recipient user's data
 */
export type PostV1Network201CareRecipient = {
  id: Id;
  created: CreatedSeconds;
  networks: Networks;
  phone?: Phone;
  username?: Username;
  name?: Name;
  namePreferred?: NamePreferred;
  zip?: Zip;
};

export type PostV1Network201 = {
  /** When the network was created */
  created: CreatedSeconds;
  /** Care recipient user's data */
  careRecipient: PostV1Network201CareRecipient;
};

export type PostV1Network422 = {
  expected: string;
  code: string;
  message: string;
};

export type PatchV1NetworkRecipientCreatedBody = {
  healthCondition?: HealthCondition;
  careNeeds?: CareNeeds;
  expectation?: Expectation;
  conditionStartDate?: ConditionStartDate;
};

export type PatchV1NetworkRecipientCreated422 = {
  expected: string;
  code: string;
  message: string;
};

export type PostV1NetworkRecipientCreatedCollaboratorBody = {
  name: Name;
  phone: Phone;
  notes?: Notes;
};

/**
 * Collaborator user's data
 */
export type PostV1NetworkRecipientCreatedCollaborator200Collaborator = {
  id: Id;
  created: CreatedSeconds;
  networks: Networks;
  phone?: Phone;
  username?: Username;
  name?: Name;
  namePreferred?: NamePreferred;
  zip?: Zip;
};

export type PostV1NetworkRecipientCreatedCollaborator200 = {
  /** Collaborator user's data */
  collaborator: PostV1NetworkRecipientCreatedCollaborator200Collaborator;
};

/**
 * Collaborator user's data
 */
export type PostV1NetworkRecipientCreatedCollaborator201Collaborator = {
  id: Id;
  created: CreatedSeconds;
  networks: Networks;
  phone?: Phone;
  username?: Username;
  name?: Name;
  namePreferred?: NamePreferred;
  zip?: Zip;
};

export type PostV1NetworkRecipientCreatedCollaborator201 = {
  /** Collaborator user's data */
  collaborator: PostV1NetworkRecipientCreatedCollaborator201Collaborator;
};

export type PostV1NetworkRecipientCreatedCollaborator422 = {
  expected: string;
  code: string;
  message: string;
};

export type PostV1PromptBody = {
  userID: UserIDNetwork;
  /** When the network was created */
  created: CreatedSeconds;
  /** Identifier of the uploaded document
- user can skip uploading a document (so it's optional) */
  id?: Id;
};

export type PostV1Prompt200 = {
  /** Identifier of a thread */
  id: Id;
  /** Identifier of the prompt run */
  runId?: string;
  /** Identifier of the assistant */
  assistantId?: string;
  /** Identifier of the uploaded file (if any) */
  fileId?: string;
};

export type PostV1Prompt422 = {
  expected: string;
  code: string;
  message: string;
};

export type PostV1PromptCheckBody = {
  userID: UserIDNetwork;
  /** When the network was created */
  created: CreatedSeconds;
  /** Identifier of the LLM thread (required) */
  id: string;
  /** Identifier of the LLM run */
  runId: string;
  /** Identifier of the assistant */
  assistantId: string;
  /** Identifier of the uploaded file (if any) */
  fileId?: string;
  /** Whether to wait for completion or return immediately */
  waitForCompletion?: boolean;
};

/**
 * Summary of the clinical document (only present if completed)
 */
export type PostV1PromptCheck200Summary = {
  /** Type of clinical document */
  noteType?: string;
  /** Medical diagnosis or condition */
  diagnosis?: string;
  /** Key care instructions */
  keyInstructions?: string[];
  /** Next steps in care plan */
  nextSteps?: string[];
  /** Medical findings from labs/imaging */
  findings?: string[];
  /** Clinical recommendations */
  recommendations?: string[];
  /** Safety concerns and escalation triggers */
  safetyAndEscalation?: string[];
};

export type PostV1PromptCheck200ExtractedRecoveryDetailsMedicationsItem = {
  /** Medication name */
  name?: string;
  /** Medication dosage */
  dose?: string;
  /** How often to take medication */
  frequency?: string;
  /** Known side effects */
  knownSideEffects?: string[];
};

export type PostV1PromptCheck200ExtractedRecoveryDetailsFollowUpAppointmentsItem = {
  /** Appointment date in YYYY-MM-DD format */
  date?: string;
  /** Healthcare provider name */
  provider?: string;
  /** Purpose of the appointment */
  purpose?: string;
};

/**
 * Detailed recovery information extracted from document
 */
export type PostV1PromptCheck200ExtractedRecoveryDetails = {
  /** List of medications */
  medications?: PostV1PromptCheck200ExtractedRecoveryDetailsMedicationsItem[];
  /** Follow-up appointments */
  followUpAppointments?: PostV1PromptCheck200ExtractedRecoveryDetailsFollowUpAppointmentsItem[];
  /** Physical therapy or rehabilitation instructions */
  therapyInstructions?: string[];
  /** Diet and activity guidelines */
  dietAndActivityInstructions?: string[];
  /** Symptoms to monitor and escalation triggers */
  monitoringOrEscalationTriggers?: string[];
};

export type PostV1PromptCheck200PrescriptionDetailsItem = {
  /** Prescription medication name */
  name?: string;
  /** Prescribed dosage */
  dose?: string;
  /** Dosing frequency */
  frequency?: string;
  /** Medication formulation */
  formulation?: string;
  /** Special instructions for taking medication */
  specialInstructions?: string;
};

export type PostV1PromptCheck200TaskListItem = {
  /** User's identifier who needs to complete the task */
  assigneeID: AssigneeID;
  /** The time by which the task should be completed
  - optional to let some tasks to be done whenever the assignee decides to */
  due?: DueSeconds;
  /** Text message content for assignee */
  msg: Msg;
  label: Label;
  created: CreatedSeconds;
};

export type PostV1PromptCheck200 = {
  /** Identifier of the LLM thread */
  id?: string;
  /** Current status of the run */
  status?: string;
  /** Whether the run has completed */
  completed?: boolean;
  /** Summary of the clinical document (only present if completed) */
  summary?: PostV1PromptCheck200Summary;
  /** Detailed recovery information extracted from document */
  extractedRecoveryDetails?: PostV1PromptCheck200ExtractedRecoveryDetails;
  /** Detailed prescription information */
  prescriptionDetails?: PostV1PromptCheck200PrescriptionDetailsItem[];
  /** List of care coordination tasks with SMS reminders */
  taskList: PostV1PromptCheck200TaskListItem[];
};

export type PostV1PromptCheck422 = {
  expected: string;
  code: string;
  message: string;
};

/**
 * The user assigned to the task
 */
export type GetV1TaskRecipientCreated200ItemAssignee = {
  id: Id;
  created: CreatedSeconds;
  networks: Networks;
  phone?: Phone;
  username?: Username;
  name?: Name;
  namePreferred?: NamePreferred;
  zip?: Zip;
};

export type GetV1TaskRecipientCreated200Item = {
  /** Unique identifier within the network */
  id: Id;
  /** User's identifier who needs to complete the task */
  assigneeID: AssigneeID;
  label: Label;
  created: CreatedSeconds;
  /** Text message content for assignee */
  msg: Msg;
  /** The time by which the task should be completed
  - optional to let some tasks to be done whenever the assignee decides to */
  due?: DueSeconds;
  updated?: UpdatedSeconds;
  done?: DoneSeconds;
  /** The time when the message was sent */
  sent?: SentSeconds;
  /** The user assigned to the task */
  assignee: GetV1TaskRecipientCreated200ItemAssignee;
};

export type PatchV1UserBody = {
  name?: Name;
  namePreferred?: NamePreferred;
  zip?: Zip;
};

export type PatchV1User422 = {
  expected: string;
  code: string;
  message: string;
};

export type GetV1UserCheckPhoneParams = {
/**
 * Command to create
 */
create?: boolean;
};

export type PostV1UserVerifyBody = {
  phone: Phone;
};

export type PostV1UserVerify422 = {
  expected: string;
  code: string;
  message: string;
};

export type PostV1UserVerifyConfirmBody = {
  phone: Phone;
  codeV: CodeV;
};

/**
 * User data, with private data included
 */
export type PostV1UserVerifyConfirm200User = {
  id: Id;
  created: CreatedSeconds;
  networks: Networks;
  phone?: Phone;
  username?: Username;
  name?: Name;
  namePreferred?: NamePreferred;
  zip?: Zip;
  confirmedPhone?: ConfirmedPhone;
  email?: Email;
  noP?: NoP;
  /** Represents when the user will be automatically removed.


A user can request account & data removal
- when we receive such request, our backend adds `ttl` attribute for automated removal a week later */
  ttl?: TtlHours;
};

export type PostV1UserVerifyConfirm200 = {
  token: Token;
  /** User data, with private data included */
  user: PostV1UserVerifyConfirm200User;
};

export type PostV1UserVerifyConfirm422 = {
  expected: string;
  code: string;
  message: string;
};

