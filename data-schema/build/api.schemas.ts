/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * gracecares.ai API
 * RESTful service for gracecares.ai website
 * OpenAPI spec version: 1.0.0
 */
/**
 * Authentication information to upload a file to AWS S3, includes:
- policy
- signature
 */
export interface AuthFile {
  /** Base64 encoded policy */
  readonly policy: string;
  /** Base64 encoded signature */
  readonly signature: string;
}

/**
 * Authentication information to upload a file to AWS S3, includes:
- policy
- signature
 */
export type AuthFiles = readonly AuthFile[];

/**
 * Timestamp in days
 */
export type CreatedDays = number;

/**
 * Timestamp in hours
 */
export type CreatedHours = number;

/**
 * Timestamp in seconds
 */
export type CreatedSeconds = number;

/**
 * Email conforming to RFC 5322
 * @pattern (?=^.{5,}$)(?=^.{0,254}$)(?=.*@.*)(?=^((([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+")))@.*$)(?=.*@((\[\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\])|(([a-zA-Z\-\d]+\.)+[a-zA-Z]{2,}))$)
 */
export type Email = string;

/**
 * Error message
 */
export type Error = string;

/**
 * Timestamp in days
 */
export type FromDays = number;

/**
 * Timestamp in hours
 */
export type FromHours = number;

/**
 * Timestamp in seconds
 */
export type FromSeconds = number;

/**
 * A custom unique identifier, generated by our service
 * @pattern (?=^.{21}$)(?=^[\w~.-]+$)
 */
export type Id = string;

export interface ItemUser {
  id: Id;
  created: CreatedSeconds;
  username: Username;
  name?: Name;
  email?: Email;
  noP?: NoP;
  /** Represents when the user will be automatically removed.


A user can request account & data removal
- when we receive such request, our backend adds `ttl` attribute for automated removal a week later */
  ttl?: TtlHours;
  notifications?: Notifications;
}

/**
 * Number of items per page.
- maximum is `100` (but we won't throw an error, if you request more)
 */
export type Limit = number;

/**
 * Display name
- (doesn't have to be unique)
 * @pattern (?=^.{1,}$)(?=^.{0,50}$)
 */
export type Name = string;

/**
 * Indicator whether a user has no password
 */
export type NoP = boolean;

/**
 * Number of unread notifications
 */
export type Notifications = number;

/**
 * Directions (cursor) for the backend to select the next page data.
- in other words, this attribute serves for pagination
- the values are separated by `,`
 */
export type Page = string;

/**
 * A secret word or phrase used to log in (We encrypt the value)
 * @pattern (?=^.{6,}$)(?=^.{0,64}$)
 */
export type Password = string;

/**
 * A new password value (We encrypt the value)
 * @pattern (?=^.{6,}$)(?=^.{0,64}$)
 */
export type PasswordNew = string;

/**
 * Signed URL to get the file from S3
 */
export type SignedUrl = string;

/**
 * Timestamp in days
 */
export type ToDays = number;

/**
 * Timestamp in hours
 */
export type ToHours = number;

/**
 * Timestamp in seconds
 */
export type ToSeconds = number;

/**
 * Request `ttl` to be added to the `item`
 */
export type TtlAdd = boolean;

/**
 * Timestamp in days
 */
export type TtlDays = number;

/**
 * Timestamp in hours
 */
export type TtlHours = number;

/**
 * Timestamp in seconds
 */
export type TtlSeconds = number;

/**
 * Timestamp in days
 */
export type UpdatedDays = number;

/**
 * Timestamp in hours
 */
export type UpdatedHours = number;

/**
 * Timestamp in seconds
 */
export type UpdatedSeconds = number;

/**
 * A custom unique identifier, generated by our service
 * @pattern (?=^.{21}$)(?=^[\w~.-]+$)
 */
export type UserIDGeneric = string;

/**
 * Must be unique. `john` & `John` are considered the same due to case-insensitivity.

A user can still save their username with uppercase letters, but the case will be preserved `only` for the display purposes.

`username` exists for/in:
- URLs
- mentions
- search
- etc.
 * @pattern (?=^.{1,}$)(?=^.{0,30}$)(?=^[\w\-.]+$)
 */
export type Username = string;

export type PostV1File200 = {
  id: Id;
  authFile: AuthFile;
};

export type PostV1MsgBody = {
  /** Thread ID for the conversation, if applicable */
  threadId: string;
  /** Phone number to send the SMS to */
  phoneNumber: string;
  /** Message to send in the SMS */
  message: string;
};

export type PostV1Msg422 = {
  expected: string;
  code: string;
  message: string;
};

/**
 * Care recipient details
 */
export type PostV1PromptBodyCareRecipient = {
  /** Full name of the care recipient */
  fullName?: string;
  /** Preferred nickname for the care recipient */
  nickname?: string;
  /** Relationship to the care recipient */
  relationship?: string;
  /** Address of the care recipient */
  address?: string;
  /** Phone number of the care recipient */
  phoneNumber?: string;
  /** Additional notes about the care recipient */
  notes?: string;
};

/**
 * Health context of the care recipient
 */
export type PostV1PromptBodyHealthContext = {
  /** Selected health tags/conditions */
  selectedTags?: string[];
  /** Selected care journey type */
  journeySelected?: string;
  /** Additional health notes */
  otherNotes?: string;
  /** When the health journey started */
  whenStarted?: string;
  /** Detailed health description */
  healthDescription?: string;
};

export type PostV1PromptBodyCollaboratorsItem = {
  /** Name of the collaborator */
  name?: string;
  /** Phone number of the collaborator */
  phone?: string;
  /** Additional notes about the collaborator */
  notes?: string;
};

export type PostV1PromptBody = {
  /** Identifier of the uploaded document
- user can skip uploading a document (so it's optional) */
  id?: Id;
  /** Phone number of the user */
  phoneNumber?: string;
  /** Selected role of the user in the care network */
  selectedRole?: string;
  /** Name of the primary caregiver */
  primaryCaregiverName?: string;
  /** Care recipient details */
  careRecipient?: PostV1PromptBodyCareRecipient;
  /** Health context of the care recipient */
  healthContext?: PostV1PromptBodyHealthContext;
  /** List of care network collaborators */
  collaborators?: PostV1PromptBodyCollaboratorsItem[];
};

export type PostV1Prompt200 = {
  /** Identifier of a thread */
  id: Id;
  /** Identifier of the prompt run */
  runId?: string;
  /** Identifier of the assistant */
  assistantId?: string;
  /** Identifier of the uploaded file (if any) */
  fileId?: string;
};

export type PostV1Prompt422 = {
  expected: string;
  code: string;
  message: string;
};

export type PostV1PromptCheckBody = {
  /** Identifier of the LLM thread (required) */
  id?: string;
  /** Identifier of the LLM run */
  runId?: string;
  /** Identifier of the assistant */
  assistantId?: string;
  /** Identifier of the uploaded file (if any) */
  fileId?: string;
  /** Whether to wait for completion or return immediately */
  waitForCompletion?: boolean;
};

/**
 * Summary of the clinical document (only present if completed)
 */
export type PostV1PromptCheck200Summary = {
  /** Name of the patient */
  patientName?: string;
  /** Type of clinical document */
  noteType?: string;
  /** Medical diagnosis or condition */
  diagnosis?: string;
  /** Key care instructions */
  keyInstructions?: string[];
  /** Next steps in care plan */
  nextSteps?: string[];
  /** Medical findings from labs/imaging */
  findings?: string[];
  /** Clinical recommendations */
  recommendations?: string[];
  /** Safety concerns and escalation triggers */
  safetyAndEscalation?: string[];
};

export type PostV1PromptCheck200ExtractedRecoveryDetailsMedicationsItem = {
  /** Medication name */
  name?: string;
  /** Medication dosage */
  dose?: string;
  /** How often to take medication */
  frequency?: string;
  /** Known side effects */
  knownSideEffects?: string[];
};

export type PostV1PromptCheck200ExtractedRecoveryDetailsFollowUpAppointmentsItem = {
  /** Appointment date in YYYY-MM-DD format */
  date?: string;
  /** Healthcare provider name */
  provider?: string;
  /** Purpose of the appointment */
  purpose?: string;
};

/**
 * Detailed recovery information extracted from document
 */
export type PostV1PromptCheck200ExtractedRecoveryDetails = {
  /** List of medications */
  medications?: PostV1PromptCheck200ExtractedRecoveryDetailsMedicationsItem[];
  /** Follow-up appointments */
  followUpAppointments?: PostV1PromptCheck200ExtractedRecoveryDetailsFollowUpAppointmentsItem[];
  /** Physical therapy or rehabilitation instructions */
  therapyInstructions?: string[];
  /** Diet and activity guidelines */
  dietAndActivityInstructions?: string[];
  /** Symptoms to monitor and escalation triggers */
  monitoringOrEscalationTriggers?: string[];
};

export type PostV1PromptCheck200PrescriptionDetailsItem = {
  /** Prescription medication name */
  name?: string;
  /** Prescribed dosage */
  dose?: string;
  /** Dosing frequency */
  frequency?: string;
  /** Medication formulation */
  formulation?: string;
  /** Special instructions for taking medication */
  specialInstructions?: string;
};

export type PostV1PromptCheck200TaskListItem = {
  /** Name of the care task */
  taskName?: string;
  /** Scheduled date for task in YYYY-MM-DD format */
  scheduledDate?: string;
  /** Name of person assigned to task */
  assignedTo?: string;
  /** SMS message for task reminder (‚â§160 chars) */
  smsMessage?: string;
};

export type PostV1PromptCheck200 = {
  /** Identifier of the LLM thread */
  id?: string;
  /** Current status of the run */
  status?: string;
  /** Whether the run has completed */
  completed?: boolean;
  /** Summary of the clinical document (only present if completed) */
  summary?: PostV1PromptCheck200Summary;
  /** Detailed recovery information extracted from document */
  extractedRecoveryDetails?: PostV1PromptCheck200ExtractedRecoveryDetails;
  /** Detailed prescription information */
  prescriptionDetails?: PostV1PromptCheck200PrescriptionDetailsItem[];
  /** List of care coordination tasks with SMS reminders */
  taskList?: PostV1PromptCheck200TaskListItem[];
};

export type PostV1PromptCheck422 = {
  expected: string;
  code: string;
  message: string;
};

